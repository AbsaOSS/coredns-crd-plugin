package netutils

/*
Copyright 2022 The k8gb Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Generated by GoLic, for more details see: https://github.com/AbsaOSS/golic
*/

import (
	"net"
	"strings"

	"github.com/miekg/dns"
)

func ExtractEdnsSubnet(msg *dns.Msg) net.IP {
	edns := msg.IsEdns0()
	if edns == nil {
		return nil
	}
	for _, o := range edns.Option {
		if o.Option() == dns.EDNS0SUBNET {
			subnet := o.(*dns.EDNS0_SUBNET)
			return subnet.Address
		}
	}
	return nil
}

// StripClosingDot strips the closing dot unless it's "."
func StripClosingDot(s string) string {
	if len(s) > 1 {
		return strings.TrimSuffix(s, ".")
	}
	return s
}

func TargetToIP(targets []string) (ips []net.IP) {
	for _, ip := range targets {
		ips = append(ips, net.ParseIP(ip))
	}
	return
}

// ParseAnswerSection converts []dns.RR into map of A or AAAA records and slice containing all except A or AAAA
func ParseAnswerSection(arr []dns.RR) (ipmap map[string]dns.RR, ip []string, noip []dns.RR) {
	ipmap = make(map[string]dns.RR)
	ip = make([]string, 0)
	noip = make([]dns.RR, 0)
	for _, r := range arr {
		switch r.Header().Rrtype {
		case dns.TypeA:
			a := r.(*dns.A).A.String()
			ipmap[a] = r
			ip = append(ip, a)
		case dns.TypeAAAA:
			aaaa := r.(*dns.AAAA).AAAA.String()
			ipmap[aaaa] = r
			ip = append(ip, aaaa)
		default:
			noip = append(noip, r)
		}
	}
	return
}
