package k8scrd

/*
Copyright 2022 The k8gb Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Generated by GoLic, for more details see: https://github.com/AbsaOSS/golic
*/

import (
	"context"

	restclient "k8s.io/client-go/rest"

	"github.com/AbsaOSS/k8s_crd/common/k8sctrl"
	dnsendpoint "github.com/AbsaOSS/k8s_crd/extdns"

	"k8s.io/client-go/kubernetes/scheme"
	"k8s.io/client-go/tools/cache"
)

// KubeController stores the current runtime configuration and cache
type KubeController struct {
	client      dnsendpoint.ExtDNSInterface
	controllers []cache.SharedIndexInformer
	labelFilter string
	hasSynced   bool
}

// RunKubeController kicks off the k8s controllers
func RunKubeController(ctx context.Context, cfg *restclient.Config, filter string) (*k8sctrl.KubeController, error) {

	err := dnsendpoint.AddToScheme(scheme.Scheme)
	if err != nil {
		return nil, err
	}

	kubeClient, err := dnsendpoint.NewForConfig(cfg)
	if err != nil {
		return nil, err
	}

	ctrl := k8sctrl.NewKubeController(ctx, kubeClient, filter)

	go ctrl.Run()

	return ctrl, nil

}
