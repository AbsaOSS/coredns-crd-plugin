/*
Copyright 2021 ABSA Group Limited

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Generated by GoLic, for more details see: https://github.com/AbsaOSS/golic
*/
package test

import (
	"errors"
	"fmt"
	"testing"
	"time"
	"net"

	"github.com/miekg/dns"
)

const (
	DefaultTimeout time.Duration = 5 * time.Second
)


func queryDNS(dnsServer string, dnsPort int, dnsName string, dnsType uint16, clientIP string) (*dns.Msg, error) {
	dnsName = fmt.Sprintf("%s.", dnsName)
	ip := net.ParseIP(clientIP)
	m := &dns.Msg{
		MsgHdr: dns.MsgHdr{
			RecursionDesired: true,
		},
		Question: make([]dns.Question, 1),
	}
	c := &dns.Client{
		ReadTimeout: DefaultTimeout,
	}
	if clientIP != "127.0.0.1" {
		o := &dns.OPT{
			Hdr: dns.RR_Header{
				Name:   ".",
				Rrtype: dns.TypeOPT,
			},
		}
		e := &dns.EDNS0_SUBNET{
			Code:          dns.EDNS0SUBNET,
			Address:       ip,
			Family:        1, // IP4
			SourceNetmask: net.IPv4len * 8,
		}
		o.Option = append(o.Option, e)
		m.Extra = append(m.Extra, o)
	}
	c.Net = "udp4"
	c.Dialer = &net.Dialer{}

	m.SetQuestion(dnsName, dnsType)
	r, _, err := c.Exchange(m, fmt.Sprintf("%s:%d", dnsServer, dnsPort))

	return r, err
}

func DigMsg(t *testing.T, dnsServer string, dnsPort int, dnsName string, dnsType uint16) (*dns.Msg, error) {
	clientIP := "127.0.0.1"
	return queryDNS(dnsServer, dnsPort, dnsName, dnsType, clientIP)
}

func DigIPs(t *testing.T, dnsServer string, dnsPort int, dnsName string, dnsType uint16, clientIP string) ([]string, error) {
	var result []string
	r, err := queryDNS(dnsServer, dnsPort, dnsName, dnsType, clientIP)

	if err != nil {
		return nil, err
	}

	for _, record := range r.Answer {
		if e, ok := record.(*dns.A); ok {
			if e.A == nil {
				return nil, errors.New("malformed message packet")
			}
			result = append(result, e.A.String())
		}
	}
	return result, nil
}
