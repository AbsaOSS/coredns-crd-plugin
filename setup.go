/*
Copyright 2021 ABSA Group Limited

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Generated by GoLic, for more details see: https://github.com/AbsaOSS/golic
*/
package gateway

import (
	"context"

	"strconv"

	"github.com/coredns/caddy"
	"github.com/coredns/coredns/core/dnsserver"
	"github.com/coredns/coredns/plugin"
	clog "github.com/coredns/coredns/plugin/pkg/log"
)

var log = clog.NewWithPlugin(thisPlugin)

const thisPlugin = "k8s_crd"

func init() {
	plugin.Register(thisPlugin, setup)
}

func setup(c *caddy.Controller) error {

	gw, err := parse(c)
	if err != nil {
		return plugin.Error(thisPlugin, err)
	}

	gw.Controller, err = RunKubeController(context.Background(), gw)
	if err != nil {
		return plugin.Error(thisPlugin, err)
	}
	gw.ExternalAddrFunc = gw.SelfAddress

	dnsserver.GetConfig(c).AddPlugin(func(next plugin.Handler) plugin.Handler {
		gw.Next = next
		return gw
	})

	return nil
}

func parse(c *caddy.Controller) (*Gateway, error) {
	gw := newGateway()

	for c.Next() {
		zones := c.RemainingArgs()
		gw.Zones = zones

		if len(gw.Zones) == 0 {
			gw.Zones = make([]string, len(c.ServerBlockKeys))
			copy(gw.Zones, c.ServerBlockKeys)
		}

		for i, str := range gw.Zones {
			gw.Zones[i] = plugin.Host(str).Normalize()
		}

		for c.NextBlock() {
			switch c.Val() {
			case "resources":
				args := c.RemainingArgs()

				gw.updateResources(args)

				if len(args) == 0 {
					return nil, c.Errf("Incorrectly formated 'resource' parameter")
				}
			case "filter":
				args := c.RemainingArgs()
				log.Infof("Filter: %+v", args)
				if len(args) == 0 {
					return nil, c.ArgErr()
				}
				gw.Filter = args[0]
			case "annotation":
				args := c.RemainingArgs()
				log.Infof("annotation: %+v", args)
				if len(args) == 0 {
					return nil, c.ArgErr()
				}
				gw.Annotation = args[0]
			case "ttl":
				args := c.RemainingArgs()
				if len(args) == 0 {
					return nil, c.ArgErr()
				}
				t, err := strconv.Atoi(args[0])
				if err != nil {
					return nil, err
				}
				if t < 0 || t > 3600 {
					return nil, c.Errf("ttl must be in range [0, 3600]: %d", t)
				}
				gw.ttlLow = uint32(t)
			case "apex":
				args := c.RemainingArgs()
				if len(args) == 0 {
					return nil, c.ArgErr()
				}
				gw.apex = args[0]
			default:
				return nil, c.Errf("Unknown property '%s'", c.Val())
			}
		}
	}
	return gw, nil

}
