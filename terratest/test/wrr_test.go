package test

/*
Copyright 2022 The k8gb Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Generated by GoLic, for more details see: https://github.com/AbsaOSS/golic
*/

import (
	"fmt"
	"math"
	"testing"

	"github.com/gruntwork-io/terratest/modules/k8s"
	"github.com/miekg/dns"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestWeightRoundRobinCornerCases(t *testing.T) {
	const clientIP = ""
	const dnsPort = 1053
	const dnsServer = "localhost"
	const hitCount = 1000

	var testsv1 = []struct {
		host string
	}{
		{
			"weight-eu-5-us-5.example.org",
		},
		{
			"weight-no-localtargets.example.org",
		},
		{
			"shuffled-order-but-ok.example.org",
		},
	}

	t.Parallel()
	p := NewResourceProvider(t)

	k8s.CreateNamespace(t, p.TestOptions, p.TestOptions.Namespace)

	defer k8s.DeleteNamespace(t, p.TestOptions, p.TestOptions.Namespace)

	defer k8s.KubectlDelete(t, p.TestOptions, p.WrrEndpointPath)

	k8s.KubectlApply(t, p.TestOptions, p.WrrEndpointPath)

	for _, test := range testsv1 {
		t.Run(test.host, func(t *testing.T) {
			ips, err := DigIPs(t, dnsServer, dnsPort, test.host, dns.TypeA, clientIP)
			require.NoError(t, err)
			assert.True(t, containsValues(ips, []string{"172.18.0.3", "172.18.0.4", "172.18.0.5", "172.18.0.6"}))

			result := []int{0, 0}
			for i := 0; i < hitCount; i++ {
				ips, err := DigIPs(t, dnsServer, dnsPort, test.host, dns.TypeA, clientIP)
				require.NoError(t, err)
				// ratio between these two combination would be the same ratio as defined by weight configuration
				if same(ips, []string{"172.18.0.3", "172.18.0.4", "172.18.0.5", "172.18.0.6"}) {
					result[0]++
				}
				if same(ips, []string{"172.18.0.5", "172.18.0.6", "172.18.0.3", "172.18.0.4"}) {
					result[1]++
				}
			}
			assert.True(t, math.Abs(float64(result[0]-result[1])) < 150)
		})
	}

	var testsv2 = []struct {
		host           string
		containsValues []string
		f              func([]string) bool
	}{
		{
			"weight-eu-0.example.org",
			[]string{"172.18.0.3", "172.18.0.4"},
			func(ips []string) bool {
				return same(ips, []string{"172.18.0.3", "172.18.0.4"}) || same(ips, []string{"172.18.0.4", "172.18.0.3"})
			},
		},
		{
			"weight-no-labels.example.org",
			[]string{"172.18.0.3", "172.18.0.4"},
			func(ips []string) bool {
				return containsValues(ips, []string{"172.18.0.4", "172.18.0.3"})
			},
		},
		{
			"weight-no-labels-and-targets.example.org",
			[]string{},
			func(ips []string) bool {
				return same(ips, []string{})
			},
		},
		{
			// this ends with warning, where label IPS doesn't match answer
			"weight-less-labels-than-targets.example.org",
			[]string{"172.18.0.3", "172.18.0.4", "172.18.0.5", "172.18.0.6"},
			func(ips []string) bool {
				return containsValues(ips, []string{"172.18.0.3", "172.18.0.4", "172.18.0.5", "172.18.0.6"})
			},
		},
		{
			"weight-eu-0-us-1.example.org",
			[]string{"172.18.0.5", "172.18.0.6", "172.18.0.3", "172.18.0.4"},
			func(ips []string) bool {
				return (ips[0] == "172.18.0.5" && ips[1] == "172.18.0.6") || (ips[0] == "172.18.0.6" && ips[1] == "172.18.0.5")
			},
		},
		{
			"targets-has-different-ips.example.org",
			[]string{"172.18.0.5", "172.18.0.6", "172.18.0.7", "172.18.0.8"},
			func(ips []string) bool {
				return containsValues(ips, []string{"172.18.0.5", "172.18.0.6", "172.18.0.7", "172.18.0.8"})
			},
		},
		{
			"unknown-strategy.example.org",
			[]string{"172.18.0.5", "172.18.0.6", "172.18.0.3", "172.18.0.4"},
			func(ips []string) bool {
				return containsValues(ips, []string{"172.18.0.3", "172.18.0.4", "172.18.0.5", "172.18.0.6"})
			},
		},
	}

	for _, test := range testsv2 {
		t.Run(test.host, func(t *testing.T) {
			ips, err := DigIPs(t, dnsServer, dnsPort, test.host, dns.TypeA, clientIP)
			require.NoError(t, err)
			assert.True(t, containsValues(ips, test.containsValues))
			for i := 0; i < hitCount; i++ {
				ips, err := DigIPs(t, dnsServer, dnsPort, test.host, dns.TypeA, clientIP)
				require.NoError(t, err)
				expectedOrder := test.f(ips)
				require.True(t, expectedOrder, "%d attempt; %v", i, ips)
			}
		})
	}

}

func TestWeightRoundRobinShuffling(t *testing.T) {
	const clientIP = ""
	const dnsPort = 1053
	const dnsServer = "localhost"
	const hitCount = 1000
	const host = "weight-eu-1-us-4.example.org"

	t.Parallel()
	p := NewResourceProvider(t)

	k8s.CreateNamespace(t, p.TestOptions, p.TestOptions.Namespace)

	defer k8s.DeleteNamespace(t, p.TestOptions, p.TestOptions.Namespace)

	defer k8s.KubectlDelete(t, p.TestOptions, p.WrrEndpointPath)

	k8s.KubectlApply(t, p.TestOptions, p.WrrEndpointPath)

	ips, err := DigIPs(t, dnsServer, dnsPort, host, dns.TypeA, clientIP)
	require.NoError(t, err)
	assert.True(t, containsValues(ips, []string{"172.18.0.3", "172.18.0.4", "172.18.0.5", "172.18.0.6"}))

	result := map[string]int{}
	for i := 0; i < hitCount; i++ {
		ips, err := DigIPs(t, dnsServer, dnsPort, host, dns.TypeA, clientIP)
		require.NoError(t, err)
		for i, v := range ips {
			result[v] += 3 - i
		}
	}
	fmt.Println(result["172.18.0.5"]+result["172.18.0.6"], " ", result["172.18.0.3"]+result["172.18.0.4"])
	assert.True(t, (result["172.18.0.5"]+result["172.18.0.6"]) > 4000, result["172.18.0.5"]+result["172.18.0.6"])
	assert.True(t, (result["172.18.0.3"]+result["172.18.0.4"]) < 2000, result["172.18.0.3"]+result["172.18.0.4"])
}
