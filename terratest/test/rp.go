package test

/*
Copyright 2022 The k8gb Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Generated by GoLic, for more details see: https://github.com/AbsaOSS/golic
*/

import (
	"fmt"
	"path/filepath"
	"strings"
	"testing"
	"time"

	"github.com/gruntwork-io/terratest/modules/k8s"
	"github.com/gruntwork-io/terratest/modules/random"
	"github.com/stretchr/testify/require"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// ResourceProvider is reusable class providing basic variables
type ResourceProvider struct {
	WrrEndpointPath string

	DnsEndpointPath string

	TtlEndpointPath string

	TxtEndpointPath string

	BrokenEndpoint string

	TestOptions *k8s.KubectlOptions

	coreDNSOptions *k8s.KubectlOptions

	coreDNSPodFiler metav1.ListOptions

	t *testing.T
}

func NewResourceProvider(t *testing.T) *ResourceProvider {
	var err error
	rp := new(ResourceProvider)
	rp.DnsEndpointPath, err = filepath.Abs("../example/dnsendpoint.yaml")
	require.NoError(t, err)
	rp.WrrEndpointPath, err = filepath.Abs("../example/dnsendpoint_wrr.yaml")
	require.NoError(t, err)
	rp.TtlEndpointPath, err = filepath.Abs("../example/dnsendpoint_ttl.yaml")
	require.NoError(t, err)
	rp.TxtEndpointPath, err = filepath.Abs("../example/dnsendpoint_txt.yaml")
	require.NoError(t, err)
	rp.BrokenEndpoint, err = filepath.Abs("../example/dnsendpoint_broken.yaml")
	require.NoError(t, err)
	rp.t = t
	namespaceName := fmt.Sprintf("coredns-test-%s", strings.ToLower(random.UniqueId()))
	rp.TestOptions = k8s.NewKubectlOptions("", "", namespaceName)
	rp.coreDNSOptions = k8s.NewKubectlOptions("", "", "coredns")
	rp.coreDNSPodFiler = metav1.ListOptions{
		LabelSelector: "app.kubernetes.io/name=coredns",
	}
	return rp
}

func (rp *ResourceProvider) GetCoreDNSPod() (*corev1.Pod, error) {
	coreDNSOptions := k8s.NewKubectlOptions("", "", "coredns")

	coreDNSPodFiler := metav1.ListOptions{
		LabelSelector: "app.kubernetes.io/name=coredns",
	}

	coreDNSPods := k8s.ListPods(rp.t, coreDNSOptions, coreDNSPodFiler)

	if len(coreDNSPods) != 1 {
		return &corev1.Pod{}, fmt.Errorf("coreDNS pod not found")
	}

	for _, pod := range coreDNSPods {
		k8s.WaitUntilPodAvailable(rp.t, coreDNSOptions, pod.Name, 60, 1*time.Second)
	}

	return &coreDNSPods[0], nil
}
