package directives

/*
Copyright 2022 The k8gb Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Generated by GoLic, for more details see: https://github.com/AbsaOSS/golic
*/

import (
	"fmt"
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestRemoving(t *testing.T) {
	const (
		existing = "existing"
		removed  = "removed"
	)
	var tests = []struct {
		name    string
		initial []string
		removed string
		error   bool
		final   []string
	}{
		{
			name:    "RemoveExisting",
			initial: []string{"2", removed, existing},
			removed: removed,
			error:   false,
			final:   []string{"2", existing},
		},
		{
			name:    "RemoveInNil",
			initial: nil,
			removed: removed,
			error:   false,
			final:   []string{},
		},
		{
			name:    "RemoveFromEmpty",
			initial: []string{},
			removed: removed,
			error:   false,
			final:   []string{},
		},
		{
			name:    "RemoveFromRepeating",
			initial: []string{existing, removed, existing},
			removed: removed,
			error:   false,
			final:   []string{existing, existing},
		},
	}
	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			m := NewDirectivesManager(test.initial)
			m.Remove(test.removed)
			compareExact(t, test.final, m.Get())
		})
	}
}

func TestInserting(t *testing.T) {
	const (
		inserted = "inserted"
		existing = "existing"
	)
	var tests = []struct {
		name    string
		initial []string
		insert  string
		before  string
		error   bool
		final   []string
	}{
		{
			name:    "InsertBeforeExisting",
			initial: []string{existing},
			insert:  inserted,
			before:  existing,
			error:   false,
			final:   []string{inserted, existing},
		},
		{
			name:    "InsertBeforeNonExisting",
			initial: []string{existing},
			insert:  inserted,
			before:  "nonexisting",
			error:   true,
			final:   []string{existing},
		},
		{
			name:    "InsertIntoNil",
			initial: nil,
			insert:  inserted,
			before:  "nonexisting",
			error:   false,
			final:   []string{inserted},
		},
		{
			name:    "InsertIntoEmpty",
			initial: []string{},
			insert:  inserted,
			before:  "nonexisting",
			error:   false,
			final:   []string{inserted},
		},
		{
			name:    "InsertIntoRepeating",
			initial: []string{existing, existing},
			insert:  inserted,
			before:  existing,
			error:   false,
			final:   []string{inserted, existing, existing},
		},
	}
	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			m := NewDirectivesManager(test.initial)
			err := m.InsertBefore(test.insert, test.before)
			assert.Equal(t, test.error, err != nil)
			compareExact(t, test.final, m.Get())
		})
	}
}

func compareExact(t *testing.T, a, b []string) (ok bool) {
	if len(a) != len(b) {
		return assert.Fail(t, fmt.Sprintf("%v not same as %v", a, b))
	}
	for i := range a {
		if a[i] != b[i] {
			return assert.Fail(t, fmt.Sprintf("%v not same as %v", a, b))
		}
	}
	return true
}
